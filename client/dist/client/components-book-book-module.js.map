{"version":3,"sources":["webpack:///./node_modules/ngx-pagination/dist/ngx-pagination.js","webpack:///./src/app/components/book/book-create/book-create.component.css","webpack:///./src/app/components/book/book-create/book-create.component.html","webpack:///./src/app/components/book/book-create/book-create.component.ts","webpack:///./src/app/components/book/book-delete/book-delete.component.css","webpack:///./src/app/components/book/book-delete/book-delete.component.html","webpack:///./src/app/components/book/book-delete/book-delete.component.ts","webpack:///./src/app/components/book/book-details/book-details.component.css","webpack:///./src/app/components/book/book-details/book-details.component.html","webpack:///./src/app/components/book/book-details/book-details.component.ts","webpack:///./src/app/components/book/book-edit/book-edit.component.css","webpack:///./src/app/components/book/book-edit/book-edit.component.html","webpack:///./src/app/components/book/book-edit/book-edit.component.ts","webpack:///./src/app/components/book/book-routing.module.ts","webpack:///./src/app/components/book/book-store/book-store.component.css","webpack:///./src/app/components/book/book-store/book-store.component.html","webpack:///./src/app/components/book/book-store/book-store.component.ts","webpack:///./src/app/components/book/book.module.ts","webpack:///./src/app/core/guards/is-admin.guard.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAA2I;AACpH;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,2BAA2B;AACpC,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,yvBAAyvB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,cAAc,6IAA6I,4BAA4B,kCAAkC,cAAc,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC/0E,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D,WAAW;AACzE;AACA,gBAAgB,4DAAc;AAC9B,qBAAqB,4DAAc;AACnC,4BAA4B,4DAAc;AAC1C,sBAAsB,4DAAc;AACpC,wBAAwB,4DAAc;AACtC,2BAA2B,4DAAc;AACzC,uBAAuB,4DAAc;AACrC,yCAAyC,4DAAc;AACvD,mCAAmC,4DAAc;AACjD,sCAAsC,4DAAc;AACpD,wBAAwB,6DAAe;AACvaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D;AAC9D,SAAS,2BAA2B;AACpC,SAAS,yEAA2B;AACpC,MAAM;AACN;AACA,gBAAgB,4DAAc;AAC9B,qBAAqB,4DAAc;AACnC,wBAAwB,6DAAe;AACvC;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,sDAAsD,WAAW;AACjE;AACA,CAAC;;AAED;AACA;AACA;;AAEQ;;;;;;;;;;;;ACrhBR,wBAAwB,eAAe,KAAK,C;;;;;;;;;;;ACA5C,i2J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,2BAA2B;AACuB;AAElD,QAAQ;AAC6E;AAErF,SAAS;AACgC;AAEzC,WAAW;AACuD;AAElE,oBAAoB;AACuD;AACE;AAO7E;IAGE,6BACU,MAAc,EACd,WAAwB;QADxB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;IAC9B,CAAC;IAEL,sCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,wDAAS,CAAC;YAClC,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC5B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC1B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBACjC,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;gBACnB,gFAAc;aACf,CAAC;YACF,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC1B,yDAAU,CAAC,QAAQ;gBACnB,kFAAe;aAChB,CAAC;YACF,YAAY,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAChC,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aAClB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aAClB,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,sCAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,CAAC,WAAW;aACb,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;aACrC,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAiB,GAAG,CAAC,IAAI,CAAC,GAAK,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;;;OAAA;IAED,sBAAI,uCAAM;aAAV;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3C,CAAC;;;OAAA;IAED,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;;;OAAA;IAED,sBAAI,qCAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,sBAAI,4CAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAChD,CAAC;;;OAAA;IAED,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;;;OAAA;IAED,sBAAI,qCAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,sBAAI,2CAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC/C,CAAC;;;OAAA;IAED,sBAAI,sCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC;;;OAAA;IAvFU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAKkB,sDAAM;YACD,uEAAW;OALvB,mBAAmB,CAyF/B;IAAD,0BAAC;CAAA;AAzF+B;;;;;;;;;;;;ACrBhC,wBAAwB,eAAe,KAAK,C;;;;;;;;;;;ACA5C,w/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,2BAA2B;AACuB;AAElD,QAAQ;AAC4D;AAEpE,SAAS;AACgD;AAEzD,WAAW;AACuD;AAOlE;IAIE,6BACU,MAAc,EACd,KAAqB,EACrB,WAAwB;QAFxB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;IAC9B,CAAC;IAEL,sCAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,CAAC,WAAW;aACb,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;aACtB,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,cAAc,CAAC,UAAU,cAAM,GAAG,CAAC,IAAI,EAAG,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAQ,GAAR;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,wDAAS,CAAC;YAClC,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC5B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBACjC,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aAClB,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,sCAAQ,GAAR;QAAA,iBAMC;QALA,IAAI,CAAC,WAAW;aACZ,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;aACnB,SAAS,CAAC;YACT,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAjDU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAMkB,sDAAM;YACP,8DAAc;YACR,uEAAW;OAPvB,mBAAmB,CAmD/B;IAAD,0BAAC;CAAA;AAnD+B;;;;;;;;;;;;ACjBhC,iCAAiC,kBAAkB,KAAK,2BAA2B,yBAAyB,KAAK,oBAAoB,oBAAoB,gCAAgC,0BAA0B,KAAK,sBAAsB,4BAA4B,yBAAyB,KAAK,2BAA2B,+BAA+B,KAAK,2BAA2B,0BAA0B,KAAK,2BAA2B,wBAAwB,uBAAuB,KAAK,kBAAkB,oBAAoB,KAAK,sBAAsB,gBAAgB,KAAK,C;;;;;;;;;;;ACAtkB,iHAAiH,YAAY,uFAAuF,YAAY,wCAAwC,UAAU,mIAAmI,UAAU,mIAAmI,UAAU,mIAAmI,UAAU,mIAAmI,UAAU,sHAAsH,iBAAiB,yBAAyB,sBAAsB,kCAAkC,aAAa,wBAAwB,YAAY,gCAAgC,WAAW,uBAAuB,WAAW,wBAAwB,iBAAiB,yDAAyD,kBAAkB,yBAAyB,YAAY,OAAO,wbAAwb,UAAU,oFAAoF,UAAU,qiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA51D,2BAA2B;AACuB;AAElD,SAAS;AACgD;AAEzD,WAAW;AACuD;AACA;AACI;AAUtE;IAWE,8BACU,MAAc,EACd,KAAqB,EACrB,WAAwB,EACxB,WAAwB,EACxB,aAA4B;QAJ5B,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,kBAAa,GAAb,aAAa,CAAe;QAPtC,UAAK,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAQzB,CAAC;IAEL,uCAAQ,GAAR;QAAA,iBAYC;QAXC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;QAEjD,IAAI,CAAC,WAAW;aACb,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;aAC1B,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;YACrB,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAO,GAAP;QAAA,iBASC;QARC,IAAI,CAAC,WAAW;aACb,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;aACtB,SAAS,CAAC;YACT,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC,EAAE;YACD,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6CAAc,GAAd;QAAA,iBAQC;QAPC,IAAI,CAAC,WAAW;aACb,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC;aAC5B,SAAS,CAAC;YACT,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,EAAE;YACD,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uCAAQ,GAAR,UAAS,MAAc;QAAvB,iBAWC;QAVC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,WAAW;iBACb,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;iBACzC,SAAS,CAAC,UAAC,GAAG;gBACb,KAAI,CAAC,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;gBACjD,KAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACvB,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACP,CAAC;IACH,CAAC;IAED,yCAAU,GAAV,UAAW,MAAc;QACvB,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3C,CAAC;IAED,oCAAK,GAAL;QACE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;IACxC,CAAC;IAjFU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAakB,sDAAM;YACP,8DAAc;YACR,uEAAW;YACX,uEAAW;YACT,2EAAa;OAhB3B,oBAAoB,CAmFhC;IAAD,2BAAC;CAAA;AAnFgC;;;;;;;;;;;;ACnBjC,wBAAwB,eAAe,KAAK,C;;;;;;;;;;;ACA5C,w1J;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,2BAA2B;AACuB;AAElD,QAAQ;AAC6E;AAErF,SAAS;AACgD;AAEzD,WAAW;AACuD;AAElE,oBAAoB;AACuD;AACE;AAO7E;IAIE,2BACU,MAAc,EACd,KAAqB,EACrB,WAAwB;QAFxB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;IAC9B,CAAC;IAEL,oCAAQ,GAAR;QAAA,iBASC;QARC,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,CAAC,WAAW;aACb,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC;aACtB,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,YAAY,CAAC,UAAU,cAAM,GAAG,CAAC,IAAI,EAAG,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,wDAAS,CAAC;YAChC,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC5B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC1B,yDAAU,CAAC,QAAQ;aACpB,CAAC;YACF,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBACjC,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC;aACzB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;gBACnB,gFAAc;aACf,CAAC;YACF,MAAM,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC1B,yDAAU,CAAC,QAAQ;gBACnB,kFAAe;aAChB,CAAC;YACF,YAAY,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAChC,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aAClB,CAAC;YACF,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE;gBAC3B,yDAAU,CAAC,QAAQ;gBACnB,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC;aAClB,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR;QAAA,iBAMC;QALC,IAAI,CAAC,WAAW;aACb,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;aAC1C,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAiB,GAAG,CAAC,IAAI,CAAC,GAAK,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sBAAI,oCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;;;OAAA;IAED,sBAAI,qCAAM;aAAV;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;;;OAAA;IAED,sBAAI,oCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;;;OAAA;IAED,sBAAI,mCAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;;;OAAA;IAED,sBAAI,0CAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;;;OAAA;IAED,sBAAI,oCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;;;OAAA;IAED,sBAAI,mCAAI;aAAR;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;;;OAAA;IAED,sBAAI,yCAAU;aAAd;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAED,sBAAI,oCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;;;OAAA;IApGU,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,eAAe;;;SAG1B,CAAC;yCAMkB,sDAAM;YACP,8DAAc;YACR,uEAAW;OAPvB,iBAAiB,CAsG7B;IAAD,wBAAC;CAAA;AAtG6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrB9B,aAAa;AAC4B;AAEzC,UAAU;AAC6C;AAEvD,aAAa;AAC6D;AACN;AACM;AACG;AACN;AAEvE,SAAS;AACuD;AAEhE,IAAM,UAAU,GAAW;IACzB;QACE,IAAI,EAAE,EAAE;QACR,UAAU,EAAE,eAAe;QAC3B,SAAS,EAAE,MAAM;KAClB;IACD;QACE,IAAI,EAAE,cAAc;QACpB,SAAS,EAAE,mFAAkB;KAC9B;IACD;QACE,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,yFAAoB;KAChC;IACD;QACE,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,CAAC,wEAAY,CAAC;QAC3B,SAAS,EAAE,sFAAmB;KAC/B;IACD;QACE,IAAI,EAAE,cAAc;QACpB,WAAW,EAAE,CAAC,wEAAY,CAAC;QAC3B,SAAS,EAAE,gFAAiB;KAC7B;IACD;QACE,IAAI,EAAE,gBAAgB;QACtB,WAAW,EAAE,CAAC,wEAAY,CAAC;QAC3B,SAAS,EAAE,sFAAmB;KAC/B;CACF,CAAC;AAMF;IAAA;IAAiC,CAAC;IAArB,iBAAiB;QAJ7B,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,iBAAiB,CAAI;IAAD,wBAAC;CAAA;AAAJ;;;;;;;;;;;;ACnD9B,gCAAgC,wBAAwB,KAAK,cAAc,uBAAuB,KAAK,iBAAiB,0BAA0B,KAAK,C;;;;;;;;;;;ACAvJ,yKAAyK,UAAU,kbAAkb,2FAA2F,0TAA0T,UAAU,0W;;;;;;;;;;;;;;;;;;;;;;;;;;;ACApgC,2BAA2B;AACkC;AAE7D,SAAS;AACwC;AAKjD,WAAW;AAC2D;AACJ;AAUlE;IAUE,4BACU,KAAqB,EACrB,UAAuB,EACvB,aAA4B;QAF5B,UAAK,GAAL,KAAK,CAAgB;QACrB,eAAU,GAAV,UAAU,CAAa;QACvB,kBAAa,GAAb,aAAa,CAAe;QAXtC,aAAQ,GAAG,EAAE,CAAC;QACd,gBAAW,GAAG,CAAC,CAAC;QAChB,UAAK,GAAG,EAAE,CAAC;QACX,aAAQ,GAAG,CAAC,CAAC;IAST,CAAC;IAEL,qCAAQ,GAAR;QAAA,iBAWC;QAVC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,MAAM;YACxD,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC;YACjC,KAAI,CAAC,WAAW,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa;aAChC,WAAW;aACX,SAAS,CAAC;YACT,KAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAW,GAAX;QACE,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;IAED,wCAAW,GAAX,UAAY,KAAa;QAAzB,iBAQC;QAPC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU;aACZ,MAAM,CAAC,KAAK,CAAC;aACb,SAAS,CAAC,UAAC,GAAG;YACb,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC;YAC5B,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAa,GAAb,UAAc,KAAa;QACzB,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,6BAA2B;mBAC9B,WAAS,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAU;mBACjD,YAAU,IAAI,CAAC,QAAU,EAAC;QAChC,CAAC;QAED,MAAM,CAAC,8BAAyB,KAAK,QAAI;cACrC,6BAA2B;eAC3B,WAAS,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAU;eACjD,YAAU,IAAI,CAAC,QAAU,EAAC;IAChC,CAAC;IAED,wCAAW,GAAX,UAAY,OAAe;QACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC3B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IA5DU,kBAAkB;QAL9B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;;;SAG3B,CAAC;yCAYiB,8DAAc;YACT,uEAAW;YACR,2EAAa;OAb3B,kBAAkB,CA6D9B;IAAD,yBAAC;CAAA;AA7D8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrB/B,aAAa;AAC4B;AAEzC,UAAU;AACqC;AACM;AACA;AACU;AACL;AAE1D,aAAa;AAC6D;AACN;AACM;AACG;AACN;AAkBvE;IAAA;IAA0B,CAAC;IAAd,UAAU;QAhBtB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,sFAAmB;gBACnB,gFAAiB;gBACjB,sFAAmB;gBACnB,yFAAoB;gBACpB,oFAAkB;aACnB;YACD,OAAO,EAAE;gBACP,4DAAY;gBACZ,kEAAmB;gBACnB,kEAAmB;gBACnB,uEAAY;gBACZ,sEAAiB;aAClB;SACF,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCvB,aAAa;AAC8B;AAE3C,SAAS;AAQgB;AAKzB,WAAW;AACgD;AAK3D;IAEE,sBACU,MAAc,EACd,aAA4B;QAD5B,WAAM,GAAN,MAAM,CAAQ;QACd,kBAAa,GAAb,aAAa,CAAe;IAClC,CAAC;IAEL,8BAAO,GAAP,UAAQ,KAAY;QAClB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAED,kCAAW,GAAX,UACE,IAA4B,EAC5B,KAA0B;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEO,8BAAO,GAAf;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACtC,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAxBU,YAAY;QAHxB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAIkB,sDAAM;YACC,sEAAa;OAJ3B,YAAY,CAyBxB;IAAD,mBAAC;CAAA;AAzBwB","file":"components-book-book-module.js","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\r\n    function PaginationService() {\r\n        this.change = new EventEmitter();\r\n        this.instances = {};\r\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n    }\r\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\r\n    PaginationService.prototype.register = function (instance) {\r\n        if (!instance.id) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            this.change.emit(instance.id);\r\n        }\r\n        else {\r\n            var changed = this.updateInstance(instance);\r\n            if (changed) {\r\n                this.change.emit(instance.id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    PaginationService.prototype.updateInstance = function (instance) {\r\n        var changed = false;\r\n        for (var prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    };\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    PaginationService.prototype.getCurrentPage = function (id) {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    PaginationService.prototype.setCurrentPage = function (id, page) {\r\n        if (this.instances[id]) {\r\n            var instance = this.instances[id];\r\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    PaginationService.prototype.getInstance = function (id) {\r\n        if (id === void 0) { id = this.DEFAULT_ID; }\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {};\r\n    };\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    PaginationService.prototype.clone = function (obj) {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    return PaginationService;\r\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\nvar PaginatePipe = (function () {\r\n    function PaginatePipe(service) {\r\n        this.service = service;\r\n        // store the values from the last time the pipe was invoked\r\n        this.state = {};\r\n    }\r\n    PaginatePipe.prototype.transform = function (collection, args) {\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (args instanceof Array) {\r\n            // compatible with angular2 before beta16\r\n            args = args[0];\r\n        }\r\n        if (!(collection instanceof Array)) {\r\n            var _id = args.id || this.service.defaultId;\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice;\r\n            }\r\n            else {\r\n                return collection;\r\n            }\r\n        }\r\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        var instance = this.createInstance(collection, args);\r\n        var id = instance.id;\r\n        var start, end;\r\n        var perPage = instance.itemsPerPage;\r\n        this.service.register(instance);\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice;\r\n            }\r\n            else {\r\n                var slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice;\r\n            }\r\n        }\r\n        // save the state for server-side collection to avoid null\r\n        // flash as new data loads.\r\n        this.saveState(id, collection, collection, start, end);\r\n        return collection;\r\n    };\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    PaginatePipe.prototype.createInstance = function (collection, args) {\r\n        var config = args;\r\n        this.checkConfig(config);\r\n        return {\r\n            id: config.id || this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    };\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    PaginatePipe.prototype.checkConfig = function (config) {\r\n        var required = ['itemsPerPage', 'currentPage'];\r\n        var missing = required.filter(function (prop) { return !(prop in config); });\r\n        if (0 < missing.length) {\r\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\r\n        }\r\n    };\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\r\n        this.state[id] = {\r\n            collection: collection,\r\n            size: collection.length,\r\n            slice: slice,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\r\n        var state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        var isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n        if (!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\r\n    };\r\n    PaginatePipe.decorators = [\r\n        { type: Pipe, args: [{\r\n                    name: 'paginate',\r\n                    pure: false\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginatePipe.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n    ]; };\r\n    return PaginatePipe;\r\n}());\n\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\r\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nfunction coerceToBoolean(input) {\r\n    return !!input && input !== 'false';\r\n}\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\nvar PaginationControlsComponent = (function () {\r\n    function PaginationControlsComponent() {\r\n        this.maxSize = 7;\r\n        this.previousLabel = 'Previous';\r\n        this.nextLabel = 'Next';\r\n        this.screenReaderPaginationLabel = 'Pagination';\r\n        this.screenReaderPageLabel = 'page';\r\n        this.screenReaderCurrentLabel = \"You're on page\";\r\n        this.pageChange = new EventEmitter();\r\n        this._directionLinks = true;\r\n        this._autoHide = false;\r\n        this._responsive = false;\r\n    }\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\r\n        get: function () {\r\n            return this._directionLinks;\r\n        },\r\n        set: function (value) {\r\n            this._directionLinks = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\r\n        get: function () {\r\n            return this._autoHide;\r\n        },\r\n        set: function (value) {\r\n            this._autoHide = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\r\n        get: function () {\r\n            return this._responsive;\r\n        },\r\n        set: function (value) {\r\n            this._responsive = coerceToBoolean(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    PaginationControlsComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'pagination-controls',\r\n                    template: DEFAULT_TEMPLATE,\r\n                    styles: [DEFAULT_STYLES],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsComponent.ctorParameters = function () { return []; };\r\n    PaginationControlsComponent.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'directionLinks': [{ type: Input },],\r\n        'autoHide': [{ type: Input },],\r\n        'responsive': [{ type: Input },],\r\n        'previousLabel': [{ type: Input },],\r\n        'nextLabel': [{ type: Input },],\r\n        'screenReaderPaginationLabel': [{ type: Input },],\r\n        'screenReaderPageLabel': [{ type: Input },],\r\n        'screenReaderCurrentLabel': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsComponent;\r\n}());\n\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\nvar PaginationControlsDirective = (function () {\r\n    function PaginationControlsDirective(service, changeDetectorRef) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.maxSize = 7;\r\n        this.pageChange = new EventEmitter();\r\n        this.pages = [];\r\n        this.changeSub = this.service.change\r\n            .subscribe(function (id) {\r\n            if (_this.id === id) {\r\n                _this.updatePageLinks();\r\n                _this.changeDetectorRef.markForCheck();\r\n                _this.changeDetectorRef.detectChanges();\r\n            }\r\n        });\r\n    }\r\n    PaginationControlsDirective.prototype.ngOnInit = function () {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\r\n        this.updatePageLinks();\r\n    };\r\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\r\n        this.changeSub.unsubscribe();\r\n    };\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    PaginationControlsDirective.prototype.previous = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    };\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    PaginationControlsDirective.prototype.next = function () {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    };\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    PaginationControlsDirective.prototype.isFirstPage = function () {\r\n        return this.getCurrent() === 1;\r\n    };\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    PaginationControlsDirective.prototype.isLastPage = function () {\r\n        return this.getLastPage() === this.getCurrent();\r\n    };\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\r\n        this.pageChange.emit(page);\r\n    };\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    PaginationControlsDirective.prototype.getCurrent = function () {\r\n        return this.service.getCurrentPage(this.id);\r\n    };\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    PaginationControlsDirective.prototype.getLastPage = function () {\r\n        var inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    };\r\n    PaginationControlsDirective.prototype.getTotalItems = function () {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    };\r\n    PaginationControlsDirective.prototype.checkValidId = function () {\r\n        if (!this.service.getInstance(this.id).id) {\r\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\r\n        }\r\n    };\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\r\n        var _this = this;\r\n        var inst = this.service.getInstance(this.id);\r\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(function () {\r\n                _this.setCurrent(correctedCurrentPage);\r\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\r\n            });\r\n        }\r\n        else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    };\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\r\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        }\r\n        else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n        return instance.currentPage;\r\n    };\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        var pages = [];\r\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        var isStart = currentPage <= halfWay;\r\n        var isEnd = totalPages - halfWay < currentPage;\r\n        var isMiddle = !isStart && !isEnd;\r\n        var ellipsesNeeded = paginationRange < totalPages;\r\n        var i = 1;\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            var label = void 0;\r\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            }\r\n            else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i++;\r\n        }\r\n        return pages;\r\n    };\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\r\n        var halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        }\r\n        else if (i === 1) {\r\n            return i;\r\n        }\r\n        else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            }\r\n            else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            }\r\n            else {\r\n                return i;\r\n            }\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    };\r\n    PaginationControlsDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'pagination-template,[pagination-template]',\r\n                    exportAs: 'paginationApi'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    PaginationControlsDirective.ctorParameters = function () { return [\r\n        { type: PaginationService, },\r\n        { type: ChangeDetectorRef, },\r\n    ]; };\r\n    PaginationControlsDirective.propDecorators = {\r\n        'id': [{ type: Input },],\r\n        'maxSize': [{ type: Input },],\r\n        'pageChange': [{ type: Output },],\r\n    };\r\n    return PaginationControlsDirective;\r\n}());\n\nvar NgxPaginationModule = (function () {\r\n    function NgxPaginationModule() {\r\n    }\r\n    NgxPaginationModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    declarations: [\r\n                        PaginatePipe,\r\n                        PaginationControlsComponent,\r\n                        PaginationControlsDirective\r\n                    ],\r\n                    providers: [PaginationService],\r\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    NgxPaginationModule.ctorParameters = function () { return []; };\r\n    return NgxPaginationModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n","module.exports = \".fas {\\r\\n  top: 8px;\\r\\n}\"","module.exports = \"<div class=\\\"form create-book-form\\\">\\r\\n  <form #formDir=\\\"ngForm\\\" [formGroup]=\\\"createBookForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    <h1>Add new Book</h1>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"title\\\" name=\\\"title\\\" placeholder=\\\"Book Title\\\" formControlName=\\\"title\\\" />\\r\\n      <i class=\\\"fas fa-book\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"title.invalid && (title.dirty || title.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"title.errors.required\\\">\\r\\n          Book title is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"author\\\" name=\\\"author\\\" placeholder=\\\"Book Author\\\" formControlName=\\\"author\\\" />\\r\\n      <i class=\\\"fas fa-user\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"author.invalid && (author.dirty || author.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"author.errors.required\\\">\\r\\n          Book author is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"genre\\\" name=\\\"genre\\\" placeholder=\\\"Book Genre\\\" formControlName=\\\"genre\\\" />\\r\\n      <i class=\\\"fas fa-clipboard\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"genre.invalid && (genre.dirty || genre.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"genre.errors.required\\\">\\r\\n          Book genre is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"year\\\" name=\\\"year\\\" placeholder=\\\"Book Relase Year\\\" formControlName=\\\"year\\\" step=\\\"1\\\" />\\r\\n      <i class=\\\"fas fa-sign-in-alt\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"year.invalid && (year.dirty || year.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"year.errors.required\\\">\\r\\n          Book release year is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <textarea class=\\\"description\\\" name=\\\"description\\\" placeholder=\\\"Book description\\\" formControlName=\\\"description\\\" cols=\\\"30\\\" rows=\\\"10\\\"></textarea>\\r\\n      <i class=\\\"fas fa-pen\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"description.invalid && (description.dirty || description.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"description.errors.required || description.errors.minlength \\\">\\r\\n          Book description must be more than 10 symbols long\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"url\\\" class=\\\"cover\\\" name=\\\"cover\\\" placeholder=\\\"Book Cover\\\" formControlName=\\\"cover\\\" />\\r\\n      <i class=\\\"fas fa-book-open\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"cover.invalid && (cover.dirty || cover.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"cover.errors.required\\\">\\r\\n          Book cover is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!cover.errors.isUrl\\\">\\r\\n          Book cover must be a valid Url\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"isbn\\\" name=\\\"isbn\\\" placeholder=\\\"Book ISBN\\\" formControlName=\\\"isbn\\\" />\\r\\n      <i class=\\\"fas fas fa-barcode\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"isbn.invalid && (isbn.dirty || isbn.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"isbn.errors.required\\\">\\r\\n          Book isbn is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!isbn.errors.isIsbn\\\">\\r\\n          Please specify a valid ISBN\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"pagesCount\\\" name=\\\"pagesCount\\\" placeholder=\\\"Book Pages Count\\\" formControlName=\\\"pagesCount\\\" step=\\\"1\\\"\\r\\n      />\\r\\n      <i class=\\\"fas fa-file-alt\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"pagesCount.invalid && (pagesCount.dirty || pagesCount.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"pagesCount.errors.required\\\">\\r\\n          Book pages count is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"pagesCount.errors.min\\\">\\r\\n          Pages count must be positive number\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"price\\\" name=\\\"price\\\" placeholder=\\\"Book Price\\\" formControlName=\\\"price\\\" step=\\\"0.1\\\" />\\r\\n      <i class=\\\"fas fa-dollar-sign\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"price.errors.required\\\">\\r\\n          Book price is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"price.errors.min\\\">\\r\\n          Price must be positive number\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <input type=\\\"submit\\\" class=\\\"submit\\\" value=\\\"Create Book\\\" [disabled]=\\\"createBookForm.invalid\\\" />\\r\\n  </form>\\r\\n</div>\"","// Decorators and Lifehooks\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n// Forms\r\nimport { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\n\r\n// Router\r\nimport { Router } from '@angular/router';\r\n\r\n// Services\r\nimport { BookService } from '../../../core/services/book.service';\r\n\r\n// Custom Validators\r\nimport { isUrlValidator } from '../../../core/directives/is-url.directive';\r\nimport { isIsbnValidator } from '../../../core/directives/is-isbn.directive';\r\n\r\n@Component({\r\n  selector: 'app-book-create',\r\n  templateUrl: './book-create.component.html',\r\n  styleUrls: ['./book-create.component.css']\r\n})\r\nexport class BookCreateComponent implements OnInit {\r\n  createBookForm: FormGroup;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private bookService: BookService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createBookForm = new FormGroup({\r\n      'title': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'author': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'genre': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'year': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'description': new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(10)\r\n      ]),\r\n      'cover': new FormControl('', [\r\n        Validators.required,\r\n        isUrlValidator\r\n      ]),\r\n      'isbn': new FormControl('', [\r\n        Validators.required,\r\n        isIsbnValidator\r\n      ]),\r\n      'pagesCount': new FormControl('', [\r\n        Validators.required,\r\n        Validators.min(0)\r\n      ]),\r\n      'price': new FormControl('', [\r\n        Validators.required,\r\n        Validators.min(0)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.bookService\r\n      .createBook(this.createBookForm.value)\r\n      .subscribe((res) => {\r\n        this.router.navigate([`/book/details/${res.data._id}`]);\r\n      });\r\n  }\r\n\r\n  get title(): AbstractControl {\r\n    return this.createBookForm.get('title');\r\n  }\r\n\r\n  get author(): AbstractControl {\r\n    return this.createBookForm.get('author');\r\n  }\r\n\r\n  get genre(): AbstractControl {\r\n    return this.createBookForm.get('genre');\r\n  }\r\n\r\n  get year(): AbstractControl {\r\n    return this.createBookForm.get('year');\r\n  }\r\n\r\n  get description(): AbstractControl {\r\n    return this.createBookForm.get('description');\r\n  }\r\n\r\n  get cover(): AbstractControl {\r\n    return this.createBookForm.get('cover');\r\n  }\r\n\r\n  get isbn(): AbstractControl {\r\n    return this.createBookForm.get('isbn');\r\n  }\r\n\r\n  get pagesCount(): AbstractControl {\r\n    return this.createBookForm.get('pagesCount');\r\n  }\r\n\r\n  get price(): AbstractControl {\r\n    return this.createBookForm.get('price');\r\n  }\r\n\r\n}\r\n","module.exports = \".fas {\\r\\n  top: 8px;\\r\\n}\"","module.exports = \"<div class=\\\"form delete-book-form\\\">\\r\\n  <form #formDir=\\\"ngForm\\\" [formGroup]=\\\"deleteBookForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    <h1>Delete Book</h1>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"title\\\" name=\\\"title\\\" placeholder=\\\"Book Title\\\" formControlName=\\\"title\\\" disabled />\\r\\n      <i class=\\\"fas fa-book\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"author\\\" name=\\\"author\\\" placeholder=\\\"Book Author\\\" formControlName=\\\"author\\\" disabled />\\r\\n      <i class=\\\"fas fa-user\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"genre\\\" name=\\\"genre\\\" placeholder=\\\"Book Genre\\\" formControlName=\\\"genre\\\" disabled />\\r\\n      <i class=\\\"fas fa-clipboard\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <textarea class=\\\"description\\\" name=\\\"description\\\" placeholder=\\\"Book description\\\" formControlName=\\\"description\\\" cols=\\\"30\\\" rows=\\\"3\\\" disabled></textarea>\\r\\n      <i class=\\\"fas fa-pen\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"price\\\" name=\\\"price\\\" placeholder=\\\"Book Price\\\" formControlName=\\\"price\\\" step=\\\"0.1\\\" disabled />\\r\\n      <i class=\\\"fas fa-dollar-sign\\\" aria-hidden=\\\"true\\\"></i>\\r\\n    </div>\\r\\n    <input type=\\\"submit\\\" class=\\\"submit delete-book\\\" value=\\\"Confirm Delete\\\" />\\r\\n  </form>\\r\\n</div>\"","// Decorators and Lifehooks\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n// Forms\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\n// Router\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n// Services\r\nimport { BookService } from '../../../core/services/book.service';\r\n\r\n@Component({\r\n  selector: 'app-book-delete',\r\n  templateUrl: './book-delete.component.html',\r\n  styleUrls: ['./book-delete.component.css']\r\n})\r\nexport class BookDeleteComponent implements OnInit {\r\n  deleteBookForm: FormGroup;\r\n  id: string;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private bookService: BookService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.id = this.route.snapshot.paramMap.get('bookId');\r\n\r\n    this.bookService\r\n      .getSingleBook(this.id)\r\n      .subscribe((res) => {\r\n        this.deleteBookForm.patchValue({ ...res.data });\r\n      });\r\n  }\r\n\r\n  initForm(): void {\r\n    this.deleteBookForm = new FormGroup({\r\n      'title': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'author': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'genre': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'description': new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(10)\r\n      ]),\r\n      'price': new FormControl('', [\r\n        Validators.required,\r\n        Validators.min(0)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n   this.bookService\r\n      .deleteBook(this.id)\r\n      .subscribe(() => {\r\n        this.router.navigate(['/home']);\r\n      });\r\n  }\r\n\r\n}\r\n","module.exports = \".book-details {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.book-details img {\\r\\n  border-radius: 5px;\\r\\n}\\r\\n\\r\\n.book-info {\\r\\n  padding: 30px;\\r\\n  background-color: #313532;\\r\\n  border-radius: 15px;\\r\\n}\\r\\n\\r\\n.book-info a {\\r\\n  text-decoration: none;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\n.book-info button {\\r\\n  margin: 10px 10px 10px 0;\\r\\n}\\r\\n\\r\\n.book-description {\\r\\n  text-align: justify;\\r\\n}\\r\\n\\r\\n.book-details div {\\r\\n  margin: 50px auto;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.checked {\\r\\n  color: orange;\\r\\n}\\r\\n\\r\\n#admin-panel {\\r\\n  margin: 0;\\r\\n}\"","module.exports = \"<div *ngIf=\\\"book\\\" class=\\\"row book-details\\\">\\r\\n  <div class=\\\"col-1\\\">\\r\\n    <img src=\\\"{{book.cover}}\\\" alt=\\\"book-cover\\\" />\\r\\n  </div>\\r\\n  <div class=\\\"col-7 book-info\\\">\\r\\n    <h3>{{book.title}}</h3>\\r\\n    <span class=\\\"fa fa-star {{stars[0]}}\\\" (click)=\\\"rateBook(1)\\\" (mouseenter)=\\\"calcRating(1)\\\" (mouseleave)=\\\"resetRating()\\\"></span>\\r\\n    <span class=\\\"fa fa-star {{stars[1]}}\\\" (click)=\\\"rateBook(2)\\\" (mouseenter)=\\\"calcRating(2)\\\" (mouseleave)=\\\"resetRating()\\\"></span>\\r\\n    <span class=\\\"fa fa-star {{stars[2]}}\\\" (click)=\\\"rateBook(3)\\\" (mouseenter)=\\\"calcRating(3)\\\" (mouseleave)=\\\"resetRating()\\\"></span>\\r\\n    <span class=\\\"fa fa-star {{stars[3]}}\\\" (click)=\\\"rateBook(4)\\\" (mouseenter)=\\\"calcRating(4)\\\" (mouseleave)=\\\"resetRating()\\\"></span>\\r\\n    <span class=\\\"fa fa-star {{stars[4]}}\\\" (click)=\\\"rateBook(5)\\\" (mouseenter)=\\\"calcRating(5)\\\" (mouseleave)=\\\"resetRating()\\\"></span>\\r\\n    <p>based on {{book.ratedCount}} ratings</p>\\r\\n    <p>{{book.comments.length}} comments</p>\\r\\n    <p>Author: {{book.author}}</p>\\r\\n    <p>Genre: {{book.genre}}</p>\\r\\n    <p>Relsease Year: {{book.year}}</p>\\r\\n    <p>ISBN: {{book.isbn}}</p>\\r\\n    <p>Pages: {{book.pagesCount}}</p>\\r\\n    <p class=\\\"book-description\\\">Description: {{book.description}}</p>\\r\\n    <h2>Price: {{book.price}} &#x24;</h2>\\r\\n    <ng-template [ngIf]=\\\"isLogged\\\">\\r\\n      <button class=\\\"btn btn-success\\\" (click)=\\\"buyBook()\\\" [disabled]=\\\"isBought\\\">Buy Book</button>\\r\\n      <button class=\\\"btn btn-secondary\\\" (click)=\\\"addToFavorites()\\\" [disabled]=\\\"isAdded\\\">Add to favourites</button>\\r\\n    </ng-template>\\r\\n    <ng-template [ngIf]=\\\"isAdmin\\\">\\r\\n      <div id=\\\"admin-panel\\\">\\r\\n        <a class=\\\"btn btn-warning\\\" routerLink=\\\"/book/edit/{{book._id}}\\\">Edit Book</a>\\r\\n        <a class=\\\"btn btn-danger\\\" routerLink=\\\"/book/delete/{{book._id}}\\\">Delete Book</a>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n    <ng-template [ngIf]=\\\"!isLogged\\\">\\r\\n      <button class=\\\"btn btn-secondary\\\" (click)=\\\"login()\\\">Login to Buy, Rate and Comment</button>\\r\\n    </ng-template>\\r\\n  </div>\\r\\n</div>\\r\\n<ng-template [ngIf]=\\\"book\\\">\\r\\n  <app-comment [bookId]=\\\"bookId\\\" [isLogged]=\\\"isLogged\\\" [isAdmin]=\\\"isAdmin\\\" [userId]=\\\"userId\\\"></app-comment>\\r\\n</ng-template>\\r\\n<div [hidden]=\\\"book\\\" class=\\\"no-results\\\">\\r\\n  <img src=\\\"https://i.imgur.com/KRVihMq.png\\\" alt=\\\"no-item-found\\\">\\r\\n</div>\"","// Decorators and Lifehooks\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n// Router\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n// Services\r\nimport { BookService } from '../../../core/services/book.service';\r\nimport { CartService } from '../../../core/services/cart.service';\r\nimport { HelperService } from '../../../core/services/helper.service';\r\n\r\n// Models\r\nimport { Book } from '../../../core/models/book.model';\r\n\r\n@Component({\r\n  selector: 'app-book-details',\r\n  templateUrl: './book-details.component.html',\r\n  styleUrls: ['./book-details.component.css']\r\n})\r\nexport class BookDetailsComponent implements OnInit {\r\n  book: Book;\r\n  bookId: string;\r\n  userId: string;\r\n  isLogged: boolean;\r\n  isAdmin: boolean;\r\n  isRated: boolean;\r\n  isAdded: boolean;\r\n  isBought: boolean;\r\n  stars = ['', '', '', '', ''];\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private bookService: BookService,\r\n    private cartService: CartService,\r\n    private helperService: HelperService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.bookId = this.route.snapshot.paramMap.get('bookId');\r\n    this.isLogged = this.helperService.isLoggedIn();\r\n    this.isAdmin = this.helperService.isAdmin();\r\n    this.userId = this.helperService.getProfile().id;\r\n\r\n    this.bookService\r\n      .getSingleBook(this.bookId)\r\n      .subscribe((res) => {\r\n        this.book = res.data;\r\n        this.calcRating(this.book.currentRating);\r\n      });\r\n  }\r\n\r\n  buyBook(): void {\r\n    this.cartService\r\n      .addToCart(this.bookId)\r\n      .subscribe(() => {\r\n        this.helperService.cartStatus.next('add');\r\n        this.isBought = true;\r\n      }, () => {\r\n        this.isBought = true;\r\n      });\r\n  }\r\n\r\n  addToFavorites(): void {\r\n    this.bookService\r\n      .addToFavourites(this.bookId)\r\n      .subscribe(() => {\r\n        this.isAdded = true;\r\n      }, () => {\r\n        this.isAdded = true;\r\n      });\r\n  }\r\n\r\n  rateBook(rating: number): void {\r\n    if (!this.isRated) {\r\n      this.isRated = true;\r\n      this.bookService\r\n        .rateBook(this.bookId, { rating: rating })\r\n        .subscribe((res) => {\r\n          this.book.currentRating = res.data.currentRating;\r\n          this.book.ratedCount++;\r\n          this.calcRating(this.book.currentRating);\r\n        });\r\n    }\r\n  }\r\n\r\n  calcRating(rating: number): void {\r\n    this.stars = ['', '', '', '', ''];\r\n    rating = Math.round(rating);\r\n    for (let i = 0; i < rating; i++) {\r\n      this.stars[i] = 'checked';\r\n    }\r\n  }\r\n\r\n  resetRating(): void {\r\n    this.calcRating(this.book.currentRating);\r\n  }\r\n\r\n  login(): void {\r\n    this.router.navigate(['/user/login']);\r\n  }\r\n\r\n}\r\n","module.exports = \".fas {\\r\\n  top: 8px;\\r\\n}\"","module.exports = \"<div class=\\\"form edit-book-form\\\">\\r\\n  <form #formDir=\\\"ngForm\\\" [formGroup]=\\\"editBookForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    <h1>Edit Book</h1>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"title\\\" name=\\\"title\\\" placeholder=\\\"Book Title\\\" formControlName=\\\"title\\\" />\\r\\n      <i class=\\\"fas fa-book\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"title.invalid && (title.dirty || title.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"title.errors.required\\\">\\r\\n          Book title is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"author\\\" name=\\\"author\\\" placeholder=\\\"Book Author\\\" formControlName=\\\"author\\\" />\\r\\n      <i class=\\\"fas fa-user\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"author.invalid && (author.dirty || author.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"author.errors.required\\\">\\r\\n          Book author is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"genre\\\" name=\\\"genre\\\" placeholder=\\\"Book Genre\\\" formControlName=\\\"genre\\\" />\\r\\n      <i class=\\\"fas fa-clipboard\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"genre.invalid && (genre.dirty || genre.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"genre.errors.required\\\">\\r\\n          Book genre is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"year\\\" name=\\\"year\\\" placeholder=\\\"Book Relase Year\\\" formControlName=\\\"year\\\" step=\\\"1\\\" />\\r\\n      <i class=\\\"fas fa-sign-in-alt\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"year.invalid && (year.dirty || year.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"year.errors.required\\\">\\r\\n          Book release year is required\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <textarea class=\\\"description\\\" name=\\\"description\\\" placeholder=\\\"Book description\\\" formControlName=\\\"description\\\" cols=\\\"30\\\" rows=\\\"10\\\"></textarea>\\r\\n      <i class=\\\"fas fa-pen\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"description.invalid && (description.dirty || description.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"description.errors.required || description.errors.minlength \\\">\\r\\n          Book description must be more than 10 symbols long\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"url\\\" class=\\\"cover\\\" name=\\\"cover\\\" placeholder=\\\"Book Cover\\\" formControlName=\\\"cover\\\" />\\r\\n      <i class=\\\"fas fa-book-open\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"cover.invalid && (cover.dirty || cover.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"cover.errors.required\\\">\\r\\n          Book cover is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!cover.errors.isUrl\\\">\\r\\n          Book cover must be a valid Url\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"text\\\" class=\\\"isbn\\\" name=\\\"isbn\\\" placeholder=\\\"Book ISBN\\\" formControlName=\\\"isbn\\\" />\\r\\n      <i class=\\\"fas fas fa-barcode\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"isbn.invalid && (isbn.dirty || isbn.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"isbn.errors.required\\\">\\r\\n          Book isbn is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"!isbn.errors.isIsbn\\\">\\r\\n          Please specify a valid ISBN\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"pagesCount\\\" name=\\\"pagesCount\\\" placeholder=\\\"Book Pages Count\\\" formControlName=\\\"pagesCount\\\" step=\\\"1\\\"\\r\\n      />\\r\\n      <i class=\\\"fas fa-file-alt\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"pagesCount.invalid && (pagesCount.dirty || pagesCount.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"pagesCount.errors.required\\\">\\r\\n          Book pages count is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"pagesCount.errors.min\\\">\\r\\n          Pages count must be positive number\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-field\\\">\\r\\n      <input type=\\\"number\\\" class=\\\"price\\\" name=\\\"price\\\" placeholder=\\\"Book Price\\\" formControlName=\\\"price\\\" step=\\\"0.1\\\" />\\r\\n      <i class=\\\"fas fa-dollar-sign\\\" aria-hidden=\\\"true\\\"></i>\\r\\n      <div *ngIf=\\\"price.invalid && (price.dirty || price.touched)\\\" class=\\\"input-error\\\">\\r\\n        <div *ngIf=\\\"price.errors.required\\\">\\r\\n          Book price is required\\r\\n        </div>\\r\\n        <div *ngIf=\\\"price.errors.min\\\">\\r\\n          Price must be positive number\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <input type=\\\"submit\\\" class=\\\"submit\\\" value=\\\"Submit Book\\\" [disabled]=\\\"editBookForm.invalid\\\" />\\r\\n  </form>\\r\\n</div>\"","// Decorators and Lifehooks\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n// Forms\r\nimport { FormControl, FormGroup, Validators, AbstractControl } from '@angular/forms';\r\n\r\n// Router\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n// Services\r\nimport { BookService } from '../../../core/services/book.service';\r\n\r\n// Custom Validators\r\nimport { isUrlValidator } from '../../../core/directives/is-url.directive';\r\nimport { isIsbnValidator } from '../../../core/directives/is-isbn.directive';\r\n\r\n@Component({\r\n  selector: 'app-book-edit',\r\n  templateUrl: './book-edit.component.html',\r\n  styleUrls: ['./book-edit.component.css']\r\n})\r\nexport class BookEditComponent implements OnInit {\r\n  editBookForm: FormGroup;\r\n  id: string;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private bookService: BookService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.id = this.route.snapshot.paramMap.get('bookId');\r\n\r\n    this.bookService\r\n      .getSingleBook(this.id)\r\n      .subscribe((res) => {\r\n        this.editBookForm.patchValue({ ...res.data });\r\n      });\r\n  }\r\n\r\n  initForm(): void {\r\n    this.editBookForm = new FormGroup({\r\n      'title': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'author': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'genre': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'year': new FormControl('', [\r\n        Validators.required\r\n      ]),\r\n      'description': new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(10)\r\n      ]),\r\n      'cover': new FormControl('', [\r\n        Validators.required,\r\n        isUrlValidator\r\n      ]),\r\n      'isbn': new FormControl('', [\r\n        Validators.required,\r\n        isIsbnValidator\r\n      ]),\r\n      'pagesCount': new FormControl('', [\r\n        Validators.required,\r\n        Validators.min(0)\r\n      ]),\r\n      'price': new FormControl('', [\r\n        Validators.required,\r\n        Validators.min(0)\r\n      ])\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    this.bookService\r\n      .editBook(this.id, this.editBookForm.value)\r\n      .subscribe((res) => {\r\n        this.router.navigate([`/book/details/${res.data._id}`]);\r\n      });\r\n  }\r\n\r\n  get title(): AbstractControl {\r\n    return this.editBookForm.get('title');\r\n  }\r\n\r\n  get author(): AbstractControl {\r\n    return this.editBookForm.get('author');\r\n  }\r\n\r\n  get genre(): AbstractControl {\r\n    return this.editBookForm.get('genre');\r\n  }\r\n\r\n  get year(): AbstractControl {\r\n    return this.editBookForm.get('year');\r\n  }\r\n\r\n  get description(): AbstractControl {\r\n    return this.editBookForm.get('description');\r\n  }\r\n\r\n  get cover(): AbstractControl {\r\n    return this.editBookForm.get('cover');\r\n  }\r\n\r\n  get isbn(): AbstractControl {\r\n    return this.editBookForm.get('isbn');\r\n  }\r\n\r\n  get pagesCount(): AbstractControl {\r\n    return this.editBookForm.get('pagesCount');\r\n  }\r\n\r\n  get price(): AbstractControl {\r\n    return this.editBookForm.get('price');\r\n  }\r\n\r\n}\r\n","// Decorators\r\nimport { NgModule } from '@angular/core';\r\n\r\n// Modules\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n// Components\r\nimport { BookCreateComponent } from './book-create/book-create.component';\r\nimport { BookEditComponent } from './book-edit/book-edit.component';\r\nimport { BookDeleteComponent } from './book-delete/book-delete.component';\r\nimport { BookDetailsComponent } from './book-details/book-details.component';\r\nimport { BookStoreComponent } from './book-store/book-store.component';\r\n\r\n// Guards\r\nimport { IsAdminGuard } from '../../core/guards/is-admin.guard';\r\n\r\nconst bookRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'store/default',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'store/:query',\r\n    component: BookStoreComponent\r\n  },\r\n  {\r\n    path: 'details/:bookId',\r\n    component: BookDetailsComponent\r\n  },\r\n  {\r\n    path: 'create',\r\n    canActivate: [IsAdminGuard],\r\n    component: BookCreateComponent\r\n  },\r\n  {\r\n    path: 'edit/:bookId',\r\n    canActivate: [IsAdminGuard],\r\n    component: BookEditComponent\r\n  },\r\n  {\r\n    path: 'delete/:bookId',\r\n    canActivate: [IsAdminGuard],\r\n    component: BookDeleteComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(bookRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class BookRoutingModule { }\r\n","module.exports = \".books-store {\\r\\n  margin: 30px auto;\\r\\n}\\r\\n\\r\\n.top {\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\\r\\n.bottom {\\r\\n  margin-bottom: 50px;\\r\\n}\"","module.exports = \"<ng-template [ngIf]=\\\"books\\\">\\r\\n  <div class=\\\"top\\\">\\r\\n    <pagination-controls\\r\\n      (pageChange)=\\\"pageChanged($event)\\\"\\r\\n      maxSize=\\\"{{maxPages}}\\\"\\r\\n      directionLinks=\\\"true\\\"\\r\\n      autoHide=\\\"true\\\"\\r\\n      responsive=\\\"true\\\"\\r\\n      previousLabel=\\\"Previous\\\"\\r\\n      nextLabel=\\\"Next\\\"\\r\\n      screenReaderPaginationLabel=\\\"Pagination\\\"\\r\\n      screenReaderPageLabel=\\\"page\\\"\\r\\n      screenReaderCurrentLabel=\\\"You're on page\\\">\\r\\n    </pagination-controls>\\r\\n  </div>\\r\\n  <div class=\\\"books-store\\\">\\r\\n    <app-book *ngFor=\\\"let book of books | paginate: {\\r\\n    itemsPerPage: pageSize,\\r\\n    currentPage: currentPage,\\r\\n    totalItems: total }\\\" [book]=\\\"book\\\"></app-book>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"books.length === 0\\\" class=\\\"no-results\\\">\\r\\n    <img src=\\\"https://i.imgur.com/KRVihMq.png\\\" alt=\\\"no-item-found\\\">\\r\\n  </div>\\r\\n  <div class=\\\"bottom\\\">\\r\\n    <pagination-controls\\r\\n      (pageChange)=\\\"pageChanged($event)\\\"\\r\\n      maxSize=\\\"{{maxPages}}\\\"\\r\\n      directionLinks=\\\"true\\\"\\r\\n      autoHide=\\\"true\\\"\\r\\n      responsive=\\\"true\\\"\\r\\n      previousLabel=\\\"Previous\\\"\\r\\n      nextLabel=\\\"Next\\\"\\r\\n      screenReaderPaginationLabel=\\\"Pagination\\\"\\r\\n      screenReaderPageLabel=\\\"page\\\"\\r\\n      screenReaderCurrentLabel=\\\"You're on page\\\">\\r\\n    </pagination-controls>\\r\\n  </div>\\r\\n</ng-template>\"","// Decorators and Lifehooks\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\n\r\n// Router\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n// RXJS\r\nimport { Subscription } from 'rxjs';\r\n\r\n// Services\r\nimport { HelperService } from '../../../core/services/helper.service';\r\nimport { BookService } from '../../../core/services/book.service';\r\n\r\n// Models\r\nimport { Book } from '../../../core/models/book.model';\r\n\r\n@Component({\r\n  selector: 'app-book-store',\r\n  templateUrl: './book-store.component.html',\r\n  styleUrls: ['./book-store.component.css']\r\n})\r\nexport class BookStoreComponent implements OnInit, OnDestroy {\r\n  currentQuery: string;\r\n  pageSize = 15;\r\n  currentPage = 1;\r\n  total = 30;\r\n  maxPages = 8;\r\n  querySub$: Subscription;\r\n  routeChangeSub$: Subscription;\r\n  books: Book[];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private bookSevice: BookService,\r\n    private helperService: HelperService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.routeChangeSub$ = this.route.params.subscribe((params) => {\r\n      this.currentQuery = params.query;\r\n      this.initRequest(this.currentQuery);\r\n    });\r\n\r\n    this.querySub$ = this.helperService\r\n      .searchQuery\r\n      .subscribe(() => {\r\n        this.currentPage = 1;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.routeChangeSub$.unsubscribe();\r\n    this.querySub$.unsubscribe();\r\n  }\r\n\r\n  initRequest(query: string): void {\r\n    query = this.generateQuery(query);\r\n    this.bookSevice\r\n      .search(query)\r\n      .subscribe((res) => {\r\n        this.total = res.itemsCount;\r\n        this.books = res.data;\r\n      });\r\n  }\r\n\r\n  generateQuery(query: string): string {\r\n    if (query === 'default') {\r\n      return `?sort={\"creationDate\":-1}`\r\n        + `&skip=${(this.currentPage - 1) * this.pageSize}`\r\n        + `&limit=${this.pageSize}`;\r\n    }\r\n\r\n    return `?query={\"searchTerm\":\"${query}\"}`\r\n      + `&sort={\"creationDate\":-1}`\r\n      + `&skip=${(this.currentPage - 1) * this.pageSize}`\r\n      + `&limit=${this.pageSize}`;\r\n  }\r\n\r\n  pageChanged(newPage: number): void {\r\n    this.currentPage = newPage;\r\n    this.initRequest(this.currentQuery);\r\n  }\r\n}\r\n","// Decorators\r\nimport { NgModule } from '@angular/core';\r\n\r\n// Modules\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { SharedModule } from '../../core/shared/shared.module';\r\nimport { BookRoutingModule } from './book-routing.module';\r\n\r\n// Components\r\nimport { BookCreateComponent } from './book-create/book-create.component';\r\nimport { BookEditComponent } from './book-edit/book-edit.component';\r\nimport { BookDeleteComponent } from './book-delete/book-delete.component';\r\nimport { BookDetailsComponent } from './book-details/book-details.component';\r\nimport { BookStoreComponent } from './book-store/book-store.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    BookCreateComponent,\r\n    BookEditComponent,\r\n    BookDeleteComponent,\r\n    BookDetailsComponent,\r\n    BookStoreComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    NgxPaginationModule,\r\n    SharedModule,\r\n    BookRoutingModule\r\n  ],\r\n})\r\nexport class BookModule { }\r\n","// Decorators\r\nimport { Injectable } from '@angular/core';\r\n\r\n// Router\r\nimport {\r\n  CanActivate,\r\n  CanLoad,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Route,\r\n  Router\r\n} from '@angular/router';\r\n\r\n// RXJS\r\nimport { Observable } from 'rxjs';\r\n\r\n// Services\r\nimport { HelperService } from '../services/helper.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class IsAdminGuard implements CanLoad, CanActivate {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private helperService: HelperService\r\n  ) { }\r\n\r\n  canLoad(route: Route): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.isAdmin();\r\n  }\r\n\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.isAdmin();\r\n  }\r\n\r\n  private isAdmin(): boolean {\r\n    if (this.helperService.isAdmin()) {\r\n      return true;\r\n    }\r\n\r\n    this.router.navigate(['/user/login']);\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":""}